name: Java CI/CD with Docker

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    name: 🔧 Build and Test
    runs-on: ubuntu-24.04

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🧪 Compile Java
        run: |
          mkdir -p bin
          javac -d bin src/*.java

      - name: 🚀 Run Automated API Tests
        run: |
          # Rendre le script de test exécutable
          chmod +x test-api.sh
          
          # Démarrer le serveur en arrière-plan
          echo "🚀 Démarrage du serveur API..."
          java -cp bin Main &
          SERVER_PID=$!
          
          # Fonction pour nettoyer en cas d'erreur
          cleanup() {
            echo "🧹 Nettoyage des processus..."
            kill $SERVER_PID 2>/dev/null || true
            sleep 2
            # Forcer l'arrêt si nécessaire
            pkill -f "java.*Main" 2>/dev/null || true
          }
          
          # Trap pour nettoyer en cas d'interruption
          trap cleanup EXIT
          
          # Attendre que le serveur démarre
          echo "⏳ Attente du démarrage du serveur..."
          STARTUP_SUCCESS=false
          for i in {1..30}; do
            if curl -s --max-time 2 http://localhost:8081/tickets/isEmpty > /dev/null 2>&1; then
              echo "✅ Serveur démarré avec succès (tentative $i/30)"
              STARTUP_SUCCESS=true
              break
            fi
            sleep 2
            echo "   Tentative $i/30..."
          done
          
          if [ "$STARTUP_SUCCESS" = false ]; then
            echo "❌ Le serveur n'a pas réussi à démarrer dans les temps"
            exit 1
          fi
          
          # Lancer les tests automatiques
          echo "🧪 Exécution des tests automatiques..."
          java -cp bin ApiTest
          TEST_EXIT_CODE=$?
          
          # Nettoyer (le trap s'occupera du cleanup)
          echo "🛑 Arrêt du serveur..."
          
          # Vérifier si les tests ont réussi
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            echo "❌ Les tests ont échoué avec le code de sortie: $TEST_EXIT_CODE"
            exit 1
          fi
          
          echo "✅ Tous les tests sont passés avec succès!"

      - name: 📊 Generate Test Report
        if: always()
        run: |
          echo "📄 Génération du rapport de test..."
          
          # Créer le rapport Markdown
          echo "# 📋 Rapport de Tests API" > test-report.md
          echo "" >> test-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> test-report.md
          echo "**Workflow:** ${{ github.workflow }}" >> test-report.md
          echo "**Run Number:** ${{ github.run_number }}" >> test-report.md
          echo "" >> test-report.md
          echo "## 🧪 Résultats des Tests" >> test-report.md
          echo "" >> test-report.md
          
          # Vérifier si le serveur est encore en cours d'exécution
          SERVER_RUNNING=false
          if pgrep -f "java.*Main" > /dev/null; then
            SERVER_RUNNING=true
            echo "ℹ️  Serveur déjà en cours d'exécution"
          else
            echo "🚀 Démarrage du serveur pour le rapport..."
            java -cp bin Main &
            SERVER_PID=$!
            
            # Attendre que le serveur démarre
            for i in {1..15}; do
              if curl -s --max-time 2 http://localhost:8081/tickets/isEmpty > /dev/null 2>&1; then
                SERVER_RUNNING=true
                break
              fi
              sleep 2
            done
          fi
          
          if [ "$SERVER_RUNNING" = true ]; then
            # Capturer les résultats de test
            echo "🧪 Capture des résultats de test..."
            java -cp bin ApiTest > test-results.txt 2>&1 || true
            
            # Ajouter les résultats au rapport
            echo '```' >> test-report.md
            cat test-results.txt >> test-report.md
            echo '```' >> test-report.md
            
            # Arrêter le serveur si nous l'avons démarré
            if [ -n "$SERVER_PID" ]; then
              kill $SERVER_PID 2>/dev/null || true
            fi
          else
            echo "❌ Impossible de démarrer le serveur pour le rapport" >> test-report.md
            echo "Serveur indisponible pour générer le rapport détaillé." > test-results.txt
          fi
          
          echo "📄 Rapport de test généré avec succès"

      - name: 📎 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-report.md
            test-results.txt

      - name: 🧪 Verify Server Connectivity
        run: |
          echo "🔍 Test de connectivité basique du serveur..."
          
          # S'assurer qu'aucun serveur ne tourne déjà
          pkill -f "java.*Main" 2>/dev/null || true
          sleep 2
          
          # Démarrer le serveur pour un test rapide
          java -cp bin Main &
          SERVER_PID=$!
          
          # Attendre et tester la connectivité
          sleep 5
          
          if curl -s --max-time 5 http://localhost:8081/ > /dev/null; then
            echo "✅ Serveur accessible via HTTP"
          else
            echo "❌ Serveur non accessible"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Nettoyer
          kill $SERVER_PID 2>/dev/null || true
          echo "🧹 Test de connectivité terminé"

      - name: 🧹 Cleanup Processes
        if: always()
        run: |
          echo "🧹 Nettoyage final des processus..."
          # Arrêter tous les processus Java Main qui pourraient encore tourner
          pkill -f "java.*Main" 2>/dev/null || true
          sleep 2
          # Vérifier qu'aucun processus ne reste
          if pgrep -f "java.*Main" > /dev/null; then
            echo "⚠️  Des processus Java sont encore en cours d'exécution"
            pkill -9 -f "java.*Main" 2>/dev/null || true
          else
            echo "✅ Tous les processus ont été nettoyés"
          fi

      - name: 🐳 Build Docker Image API
        run: docker build -t rest-api-java .

    

  

      
      
